using Gevorgyan.TodoListApp.Application.Exceptions;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;

namespace Gevorgyan.TodoListApp.Application
{
    /// <summary>
    /// Base class for input models
    /// </summary>
    [NotGeneratable]
    public class InputModelBase : IValidatableObject
    {
        /// <summary>
        /// Validates required properties to be not null
        /// </summary>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            IEnumerable<PropertyInfo> requiredProperties = GetType().GetProperties().Where(p => p.CustomAttributes.All(a => a.AttributeType == typeof(RequiredInModelAttribute)));
            foreach (PropertyInfo property in requiredProperties)
            {
                object propertyValue = property.GetValue(this);
                string propertyDisplayName = $"\"{property.GetCustomAttribute<DisplayAttribute>()?.Name ?? property.Name}\"";

                ValidationResult result = null;
                if (!RequiredInModelAttribute.IsValid(propertyValue))
                    result = new ValidationResult($"{propertyDisplayName} must be specified", new[] { property.Name });

                yield return result;
                throw new BusinessException(result.ErrorMessage);
            }
        }
    }

    /// <summary>
    /// Attribute is marked only for that string properties of the model which should not be trimmed
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public sealed class NotTrimableAttribute : Attribute
    {
    }

    /// <summary>
    /// Attribute is marked only for that models which should not be generated by Typewriter
    /// </summary>
    [AttributeUsage(AttributeTargets.Class)]
    public sealed class NotGeneratableAttribute : Attribute
    {
    }

    /// <summary>
    /// Attribute is marked only for that string properties of the model which should be entered
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public sealed class RequiredInModelAttribute : Attribute
    {
        private static readonly RequiredAttribute RequiredAttribute = new RequiredAttribute { AllowEmptyStrings = false };
        internal static ValidationResult GetValidationResult(object value, ValidationContext validationContext) => RequiredAttribute.GetValidationResult(value, validationContext);

        internal static bool IsValid(object value) => RequiredAttribute.IsValid(value);
    }
}
